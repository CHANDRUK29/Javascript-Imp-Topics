1) What is JavaScript ?
	Javascript is Know As Language of Web.
	JavaScript is a lightweight, cross-platform, single-threaded, and interpreted compiled programming language. 
	It is also known as the scripting language for webpages. It is well-known for the development of web pages, 
	and many non-browser environments also use it.


2) Difference between Node.js and JavaScript?
	JavaScript and Node.js are both crucial in modern web development, but they serve different purposes 
	and are used in different environments. 
	JavaScript is a programming language primarily used for client-side web development, 
	while Node is a runtime environment that allows JavaScript to be executed on the server side.


3) Is JavaScript is single threaded or multithreaded Why?
	JavaScript is a single threaded non-blocking asynchronous programming language. 
	Javascript itself is a single threaded language, Javascript engines such as the V8 engine 
	provides components such as the call stack, callback queue, event loop and makes use of the web APIs 
	provided by the web browser and augments Javascript to create its multithreading illusion.


3) A) what are the coercion available in javascript?
	coercion refers to the automatic or implicit conversion of values from one type to another. 
	There are two types of coercion:

	Implicit Coercion: The automatic conversion performed by JavaScript, usually during operations 
		like addition or comparison.
	Explicit Coercion: When you manually convert a value to a different type using functions 
		like String(), Number(), or Boolean().


3) B) What is Scope in Javscript?
	scope refers to the visibility or lifetime of variables, functions, and objects in different parts of the code
	Global Scope:These variables are accessible anywhere in the code.
	Local Scope:
		There are two types of local scopes:
			Function Scope: Variables declared with var inside a function.
			Block Scope: Variables declared with let or const inside a block (e.g., if, for).

	

4) What is Callback Hell?
	Callback Hell, also known as "Pyramid of Doom", refers to a situation where multiple nested 
	callbacks make the code more difficult to read and understand. This often occurs when dealing with 
	asynchronous operations, such as handling events, making HTTP requests, or reading files.


5) What is a first class function ?
	First-class functions means when functions in that language are treated like any other variable.
	Function can be passed as an argument to other functions, can be returned by another function 
	and can be assigned as a value to a variable.

	EG : function greet(name) {
    		return `Hello, ${name}!`;
	}
	// Assigning a function to a variable
	const greeting = greet;
	console.log(greeting("Alice"));  // Output: Hello, Alice!



6) What is a higher order function ?
	A higher-order function is a function that accepts another function as an argument or 
	returns a function.

	EG: function apply(func, value) {
  		return func(value);
		}

		function multiply(val) {
  			return val * val
		}

		const data = apply(multiply, 5)
		console.log(data)

6) A) How can you create object in javascript?
	Object literal: {} – most common and simple method.
	new Object(): Less common, creates an empty object.
	Constructor function: Creates an object blueprint with reusable properties and methods.
	Classes: ES6 way to create objects with cleaner syntax and inheritance support.
	Object.create(): Creates an object using another object as a prototype.
	Map: A modern data structure for key-value pairs that can use any type as keys.


  B) What is Prototype VS Prototypal Inheritance Javascript?
	Prototype is an object associated with every function in JavaScript. 
	It allows objects created by that function to share properties and methods.

	Prototypal inheritance is the mechanism that allows objects to inherit properties and methods from other objects.


7) What is the currying function?
	Currying is the process of taking a function with multiple arguments and 
	turning it into a sequence of functions each with only a single argument. 

	eg: const curryUnaryFunction = (a) => (b) => (c) => a + b + c;
	curryUnaryFunction(1); // returns a function: b => c =>  1 + b + c
	curryUnaryFunction(1)(2); // returns a function: c => 3 + c
	curryUnaryFunction(1)(2)(3); // returns the number 6


8) What is the Temporal Dead Zone ?
	The area of block where a variable is in accessible until the moment the computer completely 
	initializes it with a value.
	whenever you try to access a variable inside a temporal dead zone it gives you reference error.


9) What is an IIFE (Immediately Invoked Function Expression)
	IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined.


10) What is memoization
	Memoization is a functional programming technique which attempts to increase a function’s performance by 
	caching its previously computed results.
	

11) What is Hoisting ?
	Hoisting is a phenomena in JavaScript by which you can access the variables 
	and functions even before you have initalized it.

	Hoisting is a JavaScript mechanism where variables, function declarations and 
	classes are moved to the top of their scope before code execution.


12) what is Closures?
	A closure is the combination of a function bundled(enclosed) together with its 
	lexical environment within which that function was declared.

	Ability Of a function to remember the variables and functions that are declared in its outer scope.


13) What are classes in ES6 ?
	Classes are nothing but syntatic sugar for constructor functions.
	Classes in JavaScript provide a structured way to create objects and handle inheritance, making your 
	code more organized

14) what is constructor?
	It is a special function that creates and initializes an object instance of class. constructor gets
	called when you declare an object using "new" keyword.

15) What are modules?
	modules are encapsulated units of code that can be reused across different parts of an 
	application. Modules help organize code into smaller, manageable pieces, promote code 
	reusability, and facilitate better maintainability and scalability of NodeJS applications.

16) What is a service worker?
	A Service worker is basically a script (JavaScript file) that runs in the background, separate from a web page 
	and provides features that don't need a web page or user interaction. 


17) what is promise?
	A promise is an object that represents the eventual completion or failure of an asynchronous
	operation and resulting its value.


18) Why do you need a promise?
	Promises are used to handle asynchronous operations. They provide an alternative approach for 
	callbacks by reducing the callback hell and writing the cleaner code.


19) What are the three states of promise?
	Promises have three states:

	   a)Pending: This is an initial state of the Promise before an operation begins
	   b)Fulfilled: This state indicates that the specified operation was completed.
	   c)Rejected: This state indicates that the operation did not complete. 
	   In this case an error value will be thrown.


20) What is a callback function ?
	A callback function is a function passed into another function as an argument and is executed at a later point.
	EG: function fetchData(callback) {
    		const data = "Sample Data";
    		callback(data);
		}

	    function printData(data) {
    		console.log(`Received: ${data}`);
		}

		fetchData(printData);  // Output: Received: Sample Data



21) What is a callback hell ?
	Callback Hell is an anti-pattern with multiple nested callbacks which makes code hard 
	to read and debug when dealing with asynchronous logic.


22) What is promise chaining?
	The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining.


23) What is promise.all vs Promise.allSettled?
	Promise.all: It is a promise that takes an array of promises as an input (an iterable), and it gets resolved 
	when all the promises get resolved or any one of them gets rejected.

	Promise.allSettled: It returns a promise that resolves to an array of objects, where each object 
	represents the outcome of each promise (either resolved or rejected).

24) What is a strict mode in javascript?
	In EcmaScript 5 a new feature called javascript strict mode allows you to write code or function
	in "strict" operational environment. In the strict mode all forms of error including silent errors will be thrown,
	as a result debugging becomes a lot simpler. thus programmers chances of making an error are lowered.


25) What are the pros and cons of promises over callbacks?

	Below are the list of pros and cons of promises over callbacks:
	Pros:
	It avoids callback hell which is unreadable
	Easy to write sequential asynchronous code with .then()
	Easy to write parallel asynchronous code with Promise.all()
	Solves some of the common problems of callbacks(call the callback too late, too early, many times and swallow errors/exceptions)

	Cons:
	It makes little complex code
	You need to load a polyfill if ES6 is not supported


26) What is a polyfill
	A polyfill is a piece of JS code used to provide modern functionality 
	on older browsers that do not natively support it. 
	For example, Silverlight plugin polyfill can be used to mimic the functionality 
	of an HTML Canvas element on Microsoft Internet Explorer 7.

	There are two main polyfill libraries available,
	Core.js: It is a modular javascript library used for cutting-edge ECMAScript features.
	Polyfill.io: It provides polyfills that are required for browser needs.


27) What is tree shaking
	Tree shaking is a form of dead code elimination. It means that unused modules will not be included
 	in the bundle during the build process and for that it relies on the static structure of ES2015 module 
 	syntax,( i.e. import and export). Initially this has been popularized by the ES2015 module bundler rollup.


28) What is the difference between setTimeout, setImmediate and process.nextTick?
	Set Timeout: setTimeout() is to schedule execution of a one-time callback after delay milliseconds.
	Set Immediate: The setImmediate function is used to execute a function right after the current event loop finishes.
	Process NextTick: If process.nextTick() is called in a given phase, all the callbacks passed 
	to process.nextTick() will be resolved before the event loop continues.
 	This will block the event loop and create I/O Starvation if process.nextTick() is called recursively.

29) OOPS IN JAVASCRIPT:
	Object-Oriented Programming (OOP) in JavaScript revolves around a few core concepts: 
		Objects 
		Classes 
		Inheritance 
		Encapsulation
		Abstraction 
		Polymorphism


	OBJECTS:
		An object is a collection of properties (key-value pairs). In JavaScript, everything is an object.

		let car = {
    brand: "Toyota",
    model: "Camry",
    year: 2021,
    start: function() {
        console.log("Car started!");
    }
};

console.log(car.brand); // Toyota
car.start(); // Car started!


	CLASSES:
		Classes are blueprints for creating objects.
		They encapsulate data and functions that operate on that data.

		class Car {
    constructor(brand, model, year) {
        this.brand = brand;
        this.model = model;
        this.year = year;
    }

    start() {
        console.log("Car started!");
    }
}

let myCar = new Car("Honda", "Civic", 2022);
console.log(myCar.model); // Civic
myCar.start(); // Car started!


	ENCAPSULATION:
		Encapsulation is a concept used in object-oriented programming to
		bundle data and methods into easy-to-use units. 

		class BankAccount {
	constructor(accountNumber, accountHolderName, balance) {
		this._accountNumber = accountNumber;
		this._accountHolderName = accountHolderName;
		this._balance = balance;
	}

	showAccountDetails() {
		console.log(`Account Number: ${this._accountNumber}`);
		console.log(`Account Holder Name: ${this._accountHolderName}`);
		console.log(`Balance: ${this._balance}`);
	}

	deposit(amount) {
		this._balance += amount;
		this.showAccountDetails();
	}

	withdraw(amount) {
		if (this._balance >= amount) {
			this._balance -= amount;
			this.showAccountDetails();
		} else {
			console.log("Insufficient Balance");
		}
	}
}

let myBankAccount = new BankAccount("123456", "John Doe", 1000);
myBankAccount.deposit(500); 
// Output: Account Number: 123456 Account Holder Name: 
//John Doe Balance: 150


	ABSTRACTION:
		Abstraction in oops is an essential feature of Object Oriented Programming, which implies
		only keeping the essentials and removing unnecessary information. 
		Abstraction in OOPS is used to hide unnecessary information and display only 
		necessary information to the users interacting.

	INHERITANCE:
		Inheritance allows a class to inherit properties and methods from another class.

	POLYMORPHISM:
		The word polymorphism means having many forms. In simple words, we can define polymorphism as 
		the ability of a message to be displayed in more than one form. 
		Polymorphism allows methods to do different things based on the object it is acting upon. 
		This can be achieved through method overriding.

	MethodOverloading VS MethodOverriding IN Js

		Method overloading refers to defining multiple methods with the same name but different parameters 
		within the same class, while method overriding involves creating a method in the child class that 
		has the same name, parameters, and return type as a method in the parent class.


30) Types of Fuctions In Javascript?
	Named Function
	Anonymous Function
	Function Expression
	Arrow Function
	IIFE
	CallBack Function
	Higher Order Function



































