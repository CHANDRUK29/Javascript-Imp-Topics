1) What is Node Js?
	Node.js is an open-source, cross-platform JavaScript runtime environment that allows
	developers to run JavaScript code outside of a web browser. It is built on Chrome's V8
	JavaScript engine, which makes it fast and efficient. 
	Key Features of Node.js:
	Event-driven, non-blocking I/O model:
	Node.js uses an event-driven architecture, which means that it can handle multiple requests 
	concurrently without blocking the execution of other code. This makes it ideal for building high-performance,
	scalable applications.


2) Why use Node.js?
	Node.js makes building scalable network programs easy. Some of its advantages include:

	*)It is generally fast
	*)It rarely blocks
	*)It offers a unified programming language and data type
	*)Everything is asynchronous 
	*)It yields great concurrency


3) Why is Node.js Single-threaded?
	Node.js is single-threaded for async processing. By doing async processing on a single-thread under
	typical web loads, more performance and scalability can be achieved instead of the typical 
	thread-based implementation.


4)  If Node.js is single-threaded, then how does it handle concurrency?
	The Node JS Processing paradigm is heavily influenced by the JavaScript Event-based model and the 
	JavaScript callback system. As a result, Node.js can easily manage more concurrent client requests. 
	The event loop is the processing model's beating heart in Node.js.


5) What does concurrency mean in node JS?
	Concurrency is an essential feature of Node. js that enables it to handle large numbers of I/O operations
	simultaneously, without blocking the execution thread.


6) How would you define the term I/O in Nodejs? 
	The I/O (Input/Output) model refers not just to the input/output operations but also to anything 
	ranging from writing/reading files on your local system to making an API request to read/write 
	data to a remote system to routing the requests.


7) What is NPM?
	NPM stands for Node Package Manager, responsible for managing all the packages and modules for Node.js.

	Node Package Manager provides two main functionalities:

	*)Provides online repositories for node.js packages/modules, which are searchable on search.nodejs.org
	*)Provides command-line utility to install Node.js packages and also manages Node.js versions and dependencies  


8) What are modules?
	modules are encapsulated units of code that can be reused across different parts of an 
	application. Modules help organize code into smaller, manageable pieces, promote code 
	reusability, and facilitate better maintainability and scalability of NodeJS applications.


9) what is Express JS ?
	Express is a most popular Javascript framework that provides a wide set of features to develop 
	web and mobile applications. Express Js Helps with the management of HTTP Requests and Responses,
	routing and Handling of Middlewares.


10) What are the pros and cons of Node.js?

	PROS:
		*)Fast processing and an event-based model.
		*)Uses JavaScript, which is well-known amongst developers.
		*)Node Package Manager has over 50,000 packages that provide the functionality to an application.
		*)Best suited for streaming huge amounts of data and I/O intensive operations.
	
	CONS:
		*)Not suitable for heavy computational tasks.
		*)Using callback is complex since you end up with several nested callbacks.
		*)Dealing with relational databases is not a good option for Node.js.
		*)Since Node.js is single-threaded, CPU intensive tasks are not its strong suit.


11) Differentiate between process.nextTick() and setImmediate()?
	process.nextTick() runs code immediately after the current operation, before I/O tasks. 
	setImmediate() schedules code to run after the current event loop phase, following I/O tasks, impacting
	execution timing.


12) What is an EventEmitter in Node.js?
	EventEmitter is a class that holds all the objects that can emit events
	Whenever an object from the EventEmitter class throws an event, all attached functions are called upon synchronously.


13) What are the two types of API functions in Node.js?
	The two types of API functions in Node.js are:
		*)Asynchronous, non-blocking functions
		*)Synchronous, blocking functions


14) What is the package.json file?
	The package.json file is the heart of a Node.js system. 
	This file holds the metadata for a particular project. 
	The package.json file is found in the root directory of any Node application or module.


15) What is REPL in Node.js?
	REPL stands for Read Eval Print Loop, and it represents a computer environment.
	Itâ€™s similar to a Windows console or Unix/Linux shell in which a command is entered. 
	Then, the system responds with an output.


16) What is the control flow function?
	Control flow in Node.js refers to the order in which statements and functions are executed.
	Due to its asynchronous nature, Node.js uses specific patterns and constructs to manage how
	tasks are performed, particularly when dealing with operations like I/O, network requests,
	and file system access.


17) How does control flow manage the function calls?
	*)Control the order of execution
	*)collect Data
	*)Limit Concurrency
	*)Call the next step in program.

18) What are child Process in Node js?
	The child_process module provides several methods to create and control child processes,
	each serving different purposes depending on the level of control and interaction 
	you need with the spawned process.

	exec(): Executes a command in a shell and buffers the output.
	execFile(): Directly executes a file without a shell, which is more efficient than exec()
	for simple scripts or commands.
	spawn(): Launches a new process with a given command, providing streams for stdin, stdout, and stderr.
	fork(): A specialized version of spawn() specifically designed to spawn new Node.js processes and establish a 		communication channel between the parent and child.


18) What is the difference between fork() and spawn() methods in Node.js?
	In Node.js, both spawn and fork are methods used to create child processes,
	but they serve different purposes and behave differently
	SPAWN=> Purpose: Used to launch a new process and execute a command.
	FORK=> Purpose: Specifically used to create a new Node.js process that runs a JavaScript file.

| Feature           | fork                                   | spawn                                |
|-------------------|----------------------------------------|--------------------------------------|
| Process Type      | Node.js process running a JS file      | Any external command/process          |
| Communication     | IPC (Inter-Process Communication)      | Standard input/output streams        |
| Use Case          | Running Node.js apps with message passing | Executing shell commands or scripts   |
| Return Value      | Returns a ChildProcess instance for Node.js | Returns a ChildProcess instance for external commands |
| Data Exchange     | Supports message passing with process.send() | Uses standard streams for output and error handling |
| Overhead          | Slightly more overhead due to IPC setup | Lower overhead, especially for simple commands |



19) What is piping in Node.js?
	Piping is a mechanism used to connect the output of one stream to another stream. 
	It is normally used to retrieve data from one stream and pass output to another stream.


20) What is a reactor pattern in Node.js?
	It is basically a concept of non-blocking I/o Operations. This pattern provides a handler that is associated 
	with each I/O Operation. As soon as an I/O request it is then submitted to a demultiplexer. This demultiplexer
	is a notification interface which is capable of handling concurrency in non-blocking I/O mode.


21) What is a test pyramid in Node.js?
	A Test Pyramid is a figure which explains the propotion of unit tests, integration tests and end to end tests
	that are required for proper development of project.


22) For Node.js, why does Google use the V8 engine?
	The V8 engine, developed by Google, is open-source and written in C++. Google Chrome makes use of this engine.
	And Node js runtime also utilises the V8 engine . V8 was initially intended to improve 
	the speed of JavaScript execution within web browsers. Instead of employing an interpreter, V8 converts JavaScript 
	code into more efficient machine code to increase performance. It turns JavaScript code into machine code during
	execution by utilizing a JIT (Just-In-Time) compiler.


23) What is Middleware In Node Js?
	Middleware is a function that provides a way to process the request and response between the client and the server.
	The purpose of middleware is to perform action such as authentication, validation, data parsing and error handling
	that are required for each request and response in the application.


24) What is the purpose of NODE_ENV?
	NODE_ENV is an environment variable that stands for node environment in express server.


25) List the various Node.js timing features.
	SET TIMEOUT/CLEAR TIMEOUT : used to schedule code execution after a designated amount of milliseconds.
	SET INTERVAL/ CLEAR INTERVAL : used to execute block of codes multiple times.
	SET IMMEDIATE/ CLEAR IMMEDIATE : used to execute code at the end of current event loop cycle.

26) What is WASI, and why is it being introduced?
	WASI, which stands for WebAssembly System Interface, is a specification that enables WebAssembly modules to 
	interact with the underlying operating system in a standardized way. This allows WebAssembly code to perform 
	tasks like file system access, network communication, and environment variable manipulation, even outside of 
	the browser environment.


27) What is a fork in node JS?
	The Fork method in Node.js creates a new child process that runs a separate Node.js instance and can be useful 
	for running CPU-intensive tasks or creating a cluster of Node.js servers.


28) Are there any disadvantages to using Node.js?
	Node.Js is not suitable for CPU-intensive tasks. This is because Node.js is single-threaded, meaning it can only 
	execute one task at a time. Node.js is not suitable for applications that require a lot of memory. 
	This is because Node.js uses a lot of memory for each connection. If you have a large number of connections, 
	it can quickly consume a lot of memory.


29) What is the advantage of using Node.js?
	Node.js is fast and scalable.
	Node.js is easy to learn and use. 
	Node.js is well-suited for real-time applications, 
	such as chat applications, online games, and streaming services.
	This is because Node.js can handle a large number 
	of connections and can perform non-blocking I/O operations,
	which makes it ideal for real-time communication.


30) What is the difference between Node.js and Ajax?
	Ajax and Node.js are two different technologies that are used for different purposes. Ajax is a client-side technology 
	that allows for asynchronous communication between the client and the server. It is typically used to update parts of a
	web page without requiring a full page reload. 

	Node.js, on the other hand, is a server-side technology that is used for building fast, scalable, and efficient 
	server-side applications. It is typically used for real-time applications, such as chat applications, online games,
	and streaming services.

31) What is "non-blocking" in node.js?
	In Node.js, non-blocking refers to the ability of the runtime environment to execute multiple tasks simultaneously 
	without waiting for the completion of one task before starting the next. This is achieved through the use of 
	asynchronous I/O operations, which allow Node.js to handle multiple requests concurrently. 


32) Explain the concept of stub in Node.js?
	Stubs are simply functions that are used to write test cases to verify the working piece of code.


33) What is Libuv?
	Libuv is a widely used library used in node js. It is used to complement the asynchronous I/O functionality of node js.
	It supports very good file system movement handling methodologies.


34) Why is assert used in Node.js?
	Assert is used to explicitly write test cases to verify the working piece of code


35) What is the use of the connect module in Node.js?
	Connect Module in NodeJs is Used to provide communication B/W node js and HTTP Module. This Also provides 
	easy integration with expressJs using middleware modules.


36)  What are LTS releases of Node.js?
	LTS stands for Long Term support version of node js that receives all the critical bug fixes along with 
	security updates and performance improvements.

37) What is an Event Emitter in Node.js?
	Event Emitter is a class that holds all the objects that can emit events.


38) what is cluster in nodeJS?
	It creates multiple copies of the same application on the same machine and has them running at the same time.


39) What is meant by tracing in Node.js?
	Tracing is methodology used to collect all of tracing information that gets generated by V8 Engine.
	All of these datas are dumped into log file.


40) How are worker threads different from clusters?
	Worker threads and clusters are two different approaches to leveraging the power of multiple CPUs in Node.js.
	While clusters create multiple instances of a Node.js process, each running on a separate CPU core, worker 
	threads provide a way to create multiple threads within a single process.


41) What is a passport in Node.js?
	Passport is a popular authentication middleware for Node.js. It provides a simple and modular way to implement 
	authentication in Node.js applications. Passport supports many authentication mechanisms, 
	including username/password, social logins like Facebook and Google, and JSON Web Tokens (JWTs).


42) How to get information about a file in Node.js?
	In Node.js, the fs module provides methods for working with the file system. To get information about a file, 
	you can use the fs. stat() method.


43) What is the difference between setImmediate() and setTimeout()?
	The setTimeout() method schedules code execution after a specified delay, measured in milliseconds. 
	On the other hand, the setImmediate() method schedules code execution to occur immediately after the 
	current event loop iteration completes. This means that setImmediate() has a higher priority than setTimeout().


44) Explain the concept of Punycode in Node.js.
	PunnyCode is an encoding syntax which is used to convert unicode (UTF-8) string of characters to basic ASCII 
	string of characters.


45) What is the difference between readFile and create Read Stream in Node.js?

	READ FILE : 
		It is used to read all of the contents of a given file in an asynchronous manner
		All of the content will be read into memory before user can access it.

	CREATE READ STREAM:
		It used to break up the file into smaller chunks and then read it.
		The default chunck size is 64KB.

46) Describe the steps how does the control flow executes function calls?
	*) Function Declaration or Expression : Before a function can be called, it must be defined.
	*) Calling a Function : Once a function is defined, it can be invoked (called).
	*) Creating a Call Stack : When a function is called, it creates a new execution context and 
				    is pushed onto the call stack.
	*) Executing the Function : Once the function is at the top of the call stack, its code starts executing.
	*) Returning a Value : When the function completes execution, it may return a value using the return statement.
	*) Popping the Function Off the Call Stack : After the function execution is complete, the execution context
						     of that function is removed (popped) from the call stack.


47) What is Load Balancer VS API Gateway ?
	LOAD BALANCER : A load balancer is primarily responsible for distributing incoming network traffic 
	(usually HTTP/HTTPS requests) across multiple backend servers (or services) to 
	ensure no single server is overwhelmed.

	API GATEWAY : An API gateway acts as a middleware component that sits between clients and backend services,
	providing a centralized entry point for accessing various endpoints and functionalities. 
	Its primary function is to facilitate communication, security, and management of APIs.


48) What is Cluster and Basic working principle of Cluster?
	clusters create multiple instances of a Node.js process, each running on a separate CPU core
	The principle behind Node.js clustering is based on creating a master process that
	manages several worker processes. Each worker runs in its own process and shares the same server port.

	how it works:
	Master Process: The master process is responsible for managing worker processes. 
			Creates workers and listens for events (e.g., worker crashes).
			Distributes incoming requests to workers.

	Worker Processes: Handles the requests that are routed to them by the master process.
	Load Balancing: The Cluster module in Node.js automatically handles load balancing 
			among the worker processes using the round-robin approach.

	
49) what is Load Balancing in Clustering?
	Load balancing in clustering helps distribute incoming requests or tasks evenly across the nodes 
	(workers) in a cluster to prevent any one worker from becoming overwhelmed.


50) what is elastic search and its working principle?	
	Elasticsearch is a distributed search and analytics engine built on Apache Lucene. 
	Elasticsearch has quickly become the most popular search engine and is commonly used for
	log analytics, full-text search, security intelligence, business analytics, and operational intelligence use cases.


51) What are the types of middlewares?
	There are mainly five types of Middleware in Express.js:

	Application-level middleware - (EG)app.use()
	Router-level middleware - (EG) express.Router
	Error-handling middleware
	Built-in middleware - (EG) express.json,express.static,express.urlencoded
	Third-party middleware - cors,morgan,helmet,passport


52)  Explain what CORS is in Express JS?
	CORS (Cross-Origin Resource Sharing) is a security feature implemented by web browsers to 
	control how web pages in one domain can request and interact with resources hosted on another domain.


53) How to secure Express.Js application?
	It is very important to secure your application to protect it against various security threats. 
	We can follow few best practices in our Express.js app to enhance the security of our application.

	*)Keep Dependencies Updated: Regularly update your project dependencies, 
				     including Express.js and other npm packages.
	*)Use Helmet Middleware: The helmet middleware helps secure your application by setting various HTTP headers.
			         It helps prevent common web vulnerabilities.
	*)Set Secure HTTP Headers: Configure your application to include secure HTTP headers, such as 
				   Content Security Policy (CSP), Strict-Transport-Security (HSTS), and others.
	*)Use HTTPS: Always use HTTPS to encrypt data in transit. Obtain an SSL certificate for your domain and 
		     configure your server to use HTTPS.
	*)Secure Database Access: Use parameterized queries or prepared statements to prevent SQL injection attacks. 
				Ensure that your database credentials are secure and not exposed in configuration files.




