1) What is Node Js?
	Node.js is an open-source, cross-platform JavaScript runtime environment that allows
	developers to run JavaScript code outside of a web browser. It is built on Chrome's V8
	JavaScript engine, which makes it fast and efficient. 
	Key Features of Node.js:
	Event-driven, non-blocking I/O model:
	Node.js uses an event-driven architecture, which means that it can handle multiple requests 
	concurrently without blocking the execution of other code. This makes it ideal for building high-performance, scalable applications.


2) Why use Node.js?
	Node.js makes building scalable network programs easy. Some of its advantages include:

	*)It is generally fast
	*)It rarely blocks
	*)It offers a unified programming language and data type
	*)Everything is asynchronous 
	*)It yields great concurrency


3) Why is Node.js Single-threaded?
	Node.js is single-threaded for async processing. By doing async processing on a single-thread under
	typical web loads, more performance and scalability can be achieved instead of the typical 
	thread-based implementation.


4)  If Node.js is single-threaded, then how does it handle concurrency?
	The Node JS Processing paradigm is heavily influenced by the JavaScript Event-based model and the 
	JavaScript callback system. As a result, Node.js can easily manage more concurrent client requests. 
	The event loop is the processing model's beating heart in Node.js.


5) What does concurrency mean in node JS?
	Concurrency is an essential feature of Node. js that enables it to handle large numbers of I/O operations
	simultaneously, without blocking the execution thread.


6) How would you define the term I/O in Nodejs? 
	The I/O (Input/Output) model refers not just to the input/output operations but also to anything 
	ranging from writing/reading files on your local system to making an API request to read/write 
	data to a remote system to routing the requests.


7) What is NPM?
	NPM stands for Node Package Manager, responsible for managing all the packages and modules for Node.js.

	Node Package Manager provides two main functionalities:

	*)Provides online repositories for node.js packages/modules, which are searchable on search.nodejs.org
	*)Provides command-line utility to install Node.js packages and also manages Node.js versions and dependencies  


8) What are modules?
	modules are encapsulated units of code that can be reused across different parts of an 
	application. Modules help organize code into smaller, manageable pieces, promote code 
	reusability, and facilitate better maintainability and scalability of NodeJS applications.


9) what is Express JS ?
	Express is a most popular Javascript framework that provides a wide set of features to develop 
	web and mobile applications. Express Js Helps with the management of HTTP Requests and Responses,
	routing and Handling of Middlewares.


10) What are the pros and cons of Node.js?

	PROS:
		*)Fast processing and an event-based model.
		*)Uses JavaScript, which is well-known amongst developers.
		*)Node Package Manager has over 50,000 packages that provide the functionality to an application.
		*)Best suited for streaming huge amounts of data and I/O intensive operations.
	
	CONS:
		*)Not suitable for heavy computational tasks.
		*)Using callback is complex since you end up with several nested callbacks.
		*)Dealing with relational databases is not a good option for Node.js.
		*)Since Node.js is single-threaded, CPU intensive tasks are not its strong suit.


11) Differentiate between process.nextTick() and setImmediate()?
	process.nextTick() runs code immediately after the current operation, before I/O tasks. 
	setImmediate() schedules code to run after the current event loop phase, following I/O tasks, impacting
	execution timing.


12) What is an EventEmitter in Node.js?
	EventEmitter is a class that holds all the objects that can emit events
	Whenever an object from the EventEmitter class throws an event, all attached functions are called upon synchronously.


13) What are the two types of API functions in Node.js?
	The two types of API functions in Node.js are:
		*)Asynchronous, non-blocking functions
		*)Synchronous, blocking functions


14) What is the package.json file?
	The package.json file is the heart of a Node.js system. 
	This file holds the metadata for a particular project. 
	The package.json file is found in the root directory of any Node application or module.


15) What is REPL in Node.js?
	REPL stands for Read Eval Print Loop, and it represents a computer environment.
	It’s similar to a Windows console or Unix/Linux shell in which a command is entered. 
	Then, the system responds with an output.


16) What is the control flow function?
	The control flow function is a piece of code that runs in between several asynchronous function calls.


17) How does control flow manage the function calls?
	*)Control the order of execution
	*)collect Data
	*)Limit Concurrency
	*)Call the next step in program.


18) What is the difference between fork() and spawn() methods in Node.js?
	The fork() method is a specialized version of spawn() that is specifically designed for
	spawning new Node.js processes. It creates a new instance of the V8 engine to run a separate Node.js script.

	The spawn() method is used to launch a new process with a given command. It allows you to execute external 
	commands and interact with the child process’s input and output streams in real time.

19) What is piping in Node.js?
	Piping is a mechanism used to connect the output of one stream to another stream. 
	It is normally used to retrieve data from one stream and pass output to another stream.


20) What is a reactor pattern in Node.js?
	It is basically a concept of non-blocking I/o Operations. This pattern provides a handler that is associated 
	with each I/O Operation. As soon as an I/O request it is then submitted to a demultiplexer. This demultiplexer
	is a notification interface which is capable of handling concurrency in non-blocking I/O mode.


21) What is a test pyramid in Node.js?
	A Test Pyramid is a figure which explains the propotion of unit tests, integration tests and end to end tests
	that are required for proper development of project.


22) For Node.js, why does Google use the V8 engine?
	The V8 engine, developed by Google, is open-source and written in C++. Google Chrome makes use of this engine.
	V8,unlike the other engines, is also utilized for the popular Node.js runtime. V8 was initially intended to improve 
	the speed of JavaScript execution within web browsers. Instead of employing an interpreter, V8 converts JavaScript 
	code into more efficient machine code to increase performance. It turns JavaScript code into machine code during
	execution by utilizing a JIT (Just-In-Time) compiler, as do many current JavaScript engines such as 
	SpiderMonkey or Rhino (Mozilla).


23) What is Middleware In Node Js?
	Middleware is a function that provides a way to process the request and response between the client and the server.
	The purpose of middleware is to perform action such as authentication, validation, data parsing and error handling
	that are required for each request and response in the application.


24) What is the purpose of NODE_ENV?
	NODE_ENV is an environment variable that stands for node environment in express server.


25) List the various Node.js timing features.
	SET TIMEOUT/CLEAR TIMEOUT : used to schedule code execution after a designated amount of milliseconds.
	SET INTERVAL/ CLEAR INTERVAL : used to execute block of codes multiple times.
	SET IMMEDIATE/ CLEAR IMMEDIATE : used to execute code at the end of current event loop cycle.

26) What is WASI, and why is it being introduced?
	WASI, which stands for WebAssembly System Interface, is a specification that enables WebAssembly modules to 
	interact with the underlying operating system in a standardized way. This allows WebAssembly code to perform 
	tasks like file system access, network communication, and environment variable manipulation, even outside of 
	the browser environment.


27) What is a fork in node JS?
	The Fork method in Node.js creates a new child process that runs a separate Node.js instance and can be useful 
	for running CPU-intensive tasks or creating a cluster of Node.js servers.


28) Are there any disadvantages to using Node.js?
	Node.Js is not suitable for CPU-intensive tasks. This is because Node.js is single-threaded, meaning it can only 
	execute one task at a time. Node.js is not suitable for applications that require a lot of memory. 
	This is because Node.js uses a lot of memory for each connection. If you have a large number of connections, 
	it can quickly consume a lot of memory.


29) What is the advantage of using Node.js?
	Node.js is fast and scalable. Node.js is easy to learn and use. Node.js is well-suited for real-time applications, 
	such as chat applications, online games, and streaming services. This is because Node.js can handle a large number 
	of connections and can perform non-blocking I/O operations, which makes it ideal for real-time communication.































