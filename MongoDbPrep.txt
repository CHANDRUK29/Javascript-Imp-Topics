1) what is MongoDb?
    MongoDb is a open source document oriented NOSQL databases used for high 
    volume data storage. Instead of using tables and rows as in traditional relational
    databases mongodb uses collections and documents. 

    Collection - A group of mongodb documents.
    document - A way to organize and store data as a set of field-value pairs.

1) a) Types of NoSQL Databases?
        *) Key-value pairs : Redis,Riak
        *) Document Based : MongoDb,counchBase
        *) column Based : Cassandra, HBase
        *) Graph Based : Neo4J, Big Data


2) What are the advantages of mongodb?
    *)MongoDB supports field, range-based, string pattern matching type queries
    for searching the data in the database 
    *)MongoDB support primary and secondary index on any fields.
    *)MongoDB has inbuilt support for data partitioning (Sharding).
    *)MongoDB uses a dynamic database schema.


3) What are some features of MongoDB?
    *) Indexing: It supports generic secondary indexes and provides unique, compound, 
        geospatial, and full-text indexing capabilities as well.
    *) Aggregation: It provides an aggregation framework based on the concept of data processing pipelines.
    *) Special collection and index types: It supports time-to-live (TTL) collections for data 
        that should expire at a certain time
    *) File storage: It supports an easy-to-use protocol for storing large files and file metadata.
    *) Sharding: Sharding is the process of splitting data up across machines.


4) What is MongoShell?
    It is  Javascript shell that allows interaction with mongoDb instance from command line.


5) What is Indexing ?
    Indexing is basically a technique that helps in reducing the search time of database query or it helps in faster
    accessing the database.
    It supports efficient execution of queries in mongodb.


6) Explain Sharding ?
    Sharding is a type of database partioning in which large database is divided or partitioned into 
    smaller data and different nodes. These shards are not only smaller but also faster.

    Sharding is the process of splitting data up across machines. We also use the term "partioning".
    we can store more data and handle more load without requiring large or more powerful machines.


7) How does MongoDB store data?
    MongoDB stores data in BSON (Binary JSON) format, a binary-encoded serialization of JSON-like documents.
    These documents are stored in collections within databases.


7) A) What are Different Data Models in MongoDb?
        Embedded Data Model : Data is stored together in the same document.(similar to denormalization)
                              Data is duplicated if used in multiple documents.
                              Harder to update; requires updating the entire document.

        Referenced Data Model: Data is stored in separate documents (collections).(similar to normalization)
                               Data is normalized, no duplication.
                               Easier to update; update just the referenced document.


    B) What is Capped Collection in MongoDB?
        capped collection is a special type of collection that has a fixed size and maintains 
        insertion order. When a capped collection reaches its size limit, it automatically 
        removes the oldest documents to make room for new ones.

        // Creating a capped collection with a size limit of 1MB
        db.createCollection('logs', {
            capped: true,     // Enable capped collection
            size: 1048576,    // Set the size limit (1MB = 1048576 bytes)
            max: 1000         // Optional: limit the collection to 1000 documents
        });


    C) How can you store images, videos and other Large files (>16MB) in MongoDb?
        GridFS is a driver specification for uploading and retrieval of MongoDb files 
        Larger than 16 MB. GridFs divides large files into equal Chunks and stores them
        as a Separate documents.


8) What is a primary key in MongoDB?
    In MongoDB, the `_id` field serves as the primary key for a document. 
    It must be unique within a collection and is automatically generated if not provided during document insertion.


9) What is a replica set in MongoDB?
    It is a group of servers that maintain the same data. To keep identical copies of your data on multiple servers.
    It provides data redundancy and high availability. One server acts as the primary, 
    while others are secondary servers that replicate data from the primary.


10) What are the data types supported by MongoDB?
    MongoDB supports various data types, including string, number, boolean, date, array, object, null, 
    regex, and more. It also helps geospatial and binary data types.


11) What is a cursor in MongoDB, and when is it used?
    A cursor in MongoDB is an iterator to retrieve and process documents from query results. 
    Cursors are used when fetching large result sets, allowing you to retrieve documents in batches.


12) Can you explain the concept of data modeling in MongoDB?
    Data modeling in MongoDB involves designing the structure of your documents and collections 
    to represent your data best and meet your application's requirements. It includes defining document 
    schemas, relationships, and indexing strategies.


13) Aggregation in MongoDb?
    MongoDB's aggregation framework is a powerful tool designed for processing and transforming 
    documents within a collection. It is based on concept of a pipeline.
    We pass the documents from that collection through one or more stages each of which performs
    different operation on its inputs. Each stage takes input from the previous stage output.


14) What are the main features of MongoDB? 
    *) flexibility in data modeling, 
    *) horizontal scalability, 
    *) support for unstructured data, 
    *) powerful query language, 
    *) automatic sharding, 
    *) high availability with replica sets.


15)  What is the purpose of using MongoDB over other databases?
    MongoDB is chosen over other databases for its ability to handle flexible, unstructured, and rapidly changing data. 
    It excels in scenarios where scalability, speed, and agility are essential, such as web and mobile applications, 
    real-time analytics, and content management systems. Its horizontal scaling capabilities also make it suitable 
    for large-scale data storage and processing.


16) What are the different types of indexes in MongoDB?
    MongoDB supports various indexes, including 
        *) single-field indexes, 
        *) compound indexes, 
        *) geospatial indexes, 
        *) text indexes, 
        *) hashed indexes, and 
        *) wildcard indexes.


17) How do you scale a MongoDB database?
    You can scale MongoDB horizontally by adding more servers to a cluster, vertically by upgrading server hardware,
    or by using sharding to distribute data across multiple servers in a sharded cluster.


18) How do you implement security in MongoDB?
    MongoDB provides a range of security capabilities, including authentication, role-based access control (RBAC), 
    SSL/TLS encryption, auditing, and network security, ensuring data safeguarding and preventing unauthorized access.


19) How do you optimize query performance in MongoDB?
    You can optimize query performance by creating appropriate indexes, using the Aggregation Pipeline, 
    minimizing the number of queries, and optimizing query patterns to leverage the query planner.


20) Why NoSQL is Used Over SQL ?
    NoSQL is preferred over SQL in many cases because it offers more flexibility and scalability. 
    The primary benefit of using a NoSQL system is that it provides developers with the ability to 
    store and access data quickly and easily, without the overhead of a traditional relational database.


21) Which is better SQL or NoSQL?
    The decision of which type of database to use - SQL or NoSQL - will depend on the particular needs and 
    requirements of the project. For example, if you need a fast, scalable, and reliable database for web 
    applications then a NoSQL system may be preferable. On the other hand, if your application requires 
    complex data queries and transactional support then an SQL system may be the better choice. 


22) Explain the structure of ObjectID in MongoDB.
        ObjectID is a 12-byte BSON type. These are:
            *) 4 bytes value representing seconds
            *) 3 byte machine identifier
            *) 2 byte process id
            *) 3 byte counter


23)  What is primary and secondary replica set in MongoDB?
    In MongoDB, primary nodes are the node that can accept write. These are also known as master nodes. 
    The replication in MongoDB is single master so, only one node can accept write operations at a time.
    Secondary nodes are known as slave nodes. These are read only nodes that replicate from the primary.


24) MongoDb Query Operators?
    There are many query operators that can be used to compare and reference document fields.
        Comparison :
            *) $eq: Values are equal
            *) $ne: Values are not equal
            *) $gt: Value is greater than another value
            *) $gte: Value is greater than or equal to another value
            *) $lt: Value is less than another value
            *) $lte: Value is less than or equal to another value
            *) $in: Value is matched within an array
        
        Logical :
            *) $and: Returns documents where both queries match
            *) $or: Returns documents where either query matches
            *) $nor: Returns documents where both queries fail to match
            *) $not: Returns documents where the query does not match

        Evaluation :
            *) $regex: Allows the use of regular expressions when evaluating field values
            *) $text: Performs a text search
            *) $where: Uses a JavaScript expression to match documents


25) MongoDB Update Operators ?
        There are many update operators that can be used during document updates.
            Fields:
                *) $currentDate: Sets the field value to the current date
                *) $inc: Increments the field value
                *) $rename: Renames the field
                *) $set: Sets the value of a field
                *) $unset: Removes the field from the document

            Array:
                *) $addToSet: Adds distinct elements to an array
                *) $pop: Removes the first or last element of an array
                *) $pull: Removes all elements from an array that match the query
                *) $push: Adds an element to an array

            
26) unwind Operator vs reduce Operator?
    $unwind is an aggregation pipeline stage, which deconstructs the output by each element in a array
    (i.e) Used to deconstruct an array field in a document and create separate output documents for item in array.

    $reduce is an aggregation pipeline operator used to combine elements in an array.(similar to reduce function in js)


27) what are some utilites for BackUp and Restoring in MongoDb?
        *) Mongo Import
        *) Mongo Export
        *) Mongo Dump
        *) Mongo Restore


====================================================================================================================

// Query Practices

//Employees
db.employees.insertMany([
  {
    "_id": 4,
    "name": "Sam Wilson",
    "age": 25,
    "department": "Marketing",
    "salary": 40000,
    "projects": [
      { "name": "Project E", "status": "completed" },
      { "name": "Project F", "status": "in-progress" }
    ]
  },
  {
    "_id": 5,
    "name": "Sarah Connor",
    "age": 37,
    "department": "Operations",
    "salary": 65000,
    "projects": [
      { "name": "Project G", "status": "completed" }
    ]
  },
  {
    "_id": 6,
    "name": "Bruce Wayne",
    "age": 45,
    "department": "Finance",
    "salary": 90000,
    "projects": []
  }
]);


*) Find all employees working in the "Finance" department.
        db.employees.find({department:"Finance"}); 

*) Retrieve the names of employees whose salary is greater than 50,000.
        db.employees.find({salary:{$gt:50000}});

*) Find employees who have worked on a project with the status of "in-progress".
        db.employees.find({"projects.status":"in-progress"}) 

*) Update the salary of the employee with the name "Sam Wilson" to 45,000.
        db.employees.updateOne({name:"Sam Wilson"},{$set:{salary:45000}});

*) Find all employees whose age is between 30 and 40.
        db.employees.find({age:{$gt:30,$lt:40}}) 

*) Delete the employee document with the name "Bruce Wayne".
        db.employees.deleteOne({name:"Bruce Wayne"})

*) Add a new project "Project G" with the status of "not-started" to the employee "Sam Wilson".
        db.employees.updateOne( { name: "Sam Wilson" }, { $push: { projects: { name: "Project G", status: "not-started" } } } );

*) Find employees who have no projects assigned.
        db.employees.find({projects:{$size:0}}) 

*) Retrieve the total number of employees in each department.
        db.employees.aggregate([{$group:{_id:"$department",totalEmployees:{$sum:1}}}])

*) Sort employees by their salary in descending order.
        db.employees.find().sort({salary:-1})


================================================================================================

// products 

db.products.insertMany([
  {
    "_id": 101,
    "name": "Laptop",
    "category": "Electronics",
    "price": 1200,
    "stock": 50,
    "ratings": [
      { "user": "John", "rating": 5 },
      { "user": "Jane", "rating": 4 }
    ]
  },
  {
    "_id": 102,
    "name": "Smartphone",
    "category": "Electronics",
    "price": 800,
    "stock": 120,
    "ratings": [
      { "user": "Mike", "rating": 4 },
      { "user": "Alice", "rating": 5 }
    ]
  },
  {
    "_id": 103,
    "name": "Washing Machine",
    "category": "Home Appliances",
    "price": 600,
    "stock": 30,
    "ratings": [
      { "user": "Sam", "rating": 3 }
    ]
  }
]);


*) Find all products in the "Electronics" category.
    db.products.find({category:"Electronics"})

*) Retrieve the names and prices of products priced above 800.
    db.products.find({price:{$gt:800}})

*) Find products that have a rating of 5 from any user.
    db.products.find({"ratings.rating":{$eq:5}})

*) Update the stock of the product with the name "Smartphone" to 100.
    db.products.updateOne({name:"Smartphone"},{$set:{stock:100}})

*) Find all products where the stock is less than 50.
    db.products.find({stock:{$lt:50}})

*) Delete the product document with the name "Washing Machine".
    db.products.deleteOne({name:"Washing Machine"})

*) Add a new rating from user "Sara" with a rating of 4 to the product "Laptop".
    db.products.updateOne({name:"Laptop"},{$push:{ratings:{user:"Sara",rating:4}}})

*) Find all products where the price is between 600 and 1200.
    db.products.find({price:{$gt:600,$lt:1200}})

*) Retrieve the average rating of the product "Laptop".
    db.products.aggregate([
        {$match:{name:"Laptop"}},
        {$unwind:"$ratings"},
        {$group:{_id:"$name",averageRating:{$avg:"$ratings.rating"}}}
        ])

*) Sort products by their price in ascending order.
    db.products.find().sort({price:1}) 
                    (OR)
    db.products.aggregate([{$sort:{price:1}}])

*) Fetch only the name of products:
    db.products.aggregate([{$project:{name:1}}])
                (OR)
    db.products.find({},{name:1})


=========================================================================================

// Customers

db.customers.insertMany([
  {
    "_id": 201,
    "name": "Tom Hardy",
    "age": 35,
    "location": "New York",
    "purchases": [
      { "product": "Laptop", "quantity": 1, "date": "2024-01-15" },
      { "product": "Smartphone", "quantity": 2, "date": "2024-03-10" }
    ]
  },
  {
    "_id": 202,
    "name": "Emily Blunt",
    "age": 28,
    "location": "Los Angeles",
    "purchases": [
      { "product": "Washing Machine", "quantity": 1, "date": "2024-02-20" }
    ]
  },
  {
    "_id": 203,
    "name": "Chris Hemsworth",
    "age": 38,
    "location": "San Francisco",
    "purchases": [
      { "product": "Laptop", "quantity": 1, "date": "2024-04-12" }
    ]
  }
]);


    *) Find all customers who live in "New York".
        db.customers.find();

    *) Retrieve the names and locations of customers whose age is above 30.
         db.customers.find({age:{$gt:30}},{name:1,location:1})

    *) Find customers who purchased a "Laptop".
        db.customers.find({"purchases.product":"Laptop"})
                (OR)
        db.customers.aggregate([
            {
              $match: {"purchases.product": "Laptop"}
            }
            ]);

    *) Update the location of the customer "Chris Hemsworth" to "Chicago".
        db.customers.updateOne({name:"Chris Hemsworth"},{$set:{location:"Chicago"}})

    *) Find all customers who have made more than one purchase.
        db.customers.find({$where:"this.purchases.length>1"})
                    (OR)
        db.customers.find({purchases:{$exists:true,$not:{$size:1}}})
                    (OR)
        db.customers.aggregate([
            {
              $project: {
                name: 1,
                purchasesCount: { $size: "$purchases" }
              }
            },
            {
              $match: {
                purchasesCount: { $gt: 1 }
              }
            }
        ]);


    *) Delete the customer document with the name "Emily Blunt".
        db.products.deleteOne({name:"Emily Blunt"})

    *) Add a new purchase of "Smartphone" with quantity 1 and date "2024-05-01" to the customer "Tom Hardy".
        db.customers.updateOne(
                { name: "Tom Hardy" },          
                { 
                  $push: {                      
                    purchases: {
                      product: "Smartphone", 
                      quantity: 1, 
                      date: "2024-05-01"
                    }
                  }
                }
            );

    *) Find all customers whose age is less than 30.
        db.customers.find({age:{$lt:30}})

    *) Retrieve the total number of purchases for each customer.
        db.customers.aggregate([
            {
                $project:
                {
                    name:1,
                    totalpurchases:{$size:"$purchases"}
                }
            }
        ]);

    *) Sort customers by their age in descending order.
        db.customers.find().sort({age:-1})

====================================================================================================



// orders 


db.orders.insertMany([
  {
    "_id": 301,
    "orderId": "ORD1001",
    "customerName": "Tom Hardy",
    "items": [
      { "product": "Laptop", "quantity": 1, "price": 1200 },
      { "product": "Smartphone", "quantity": 2, "price": 800 }
    ],
    "total": 2800,
    "status": "delivered",
    "orderDate": "2024-03-15"
  },
  {
    "_id": 302,
    "orderId": "ORD1002",
    "customerName": "Emily Blunt",
    "items": [
      { "product": "Washing Machine", "quantity": 1, "price": 600 }
    ],
    "total": 600,
    "status": "shipped",
    "orderDate": "2024-03-20"
  },
  {
    "_id": 303,
    "orderId": "ORD1003",
    "customerName": "Chris Hemsworth",
    "items": [
      { "product": "Laptop", "quantity": 1, "price": 1200 }
    ],
    "total": 1200,
    "status": "processing",
    "orderDate": "2024-04-01"
  }
]);


  *) Find all orders where the status is "delivered".
      db.orders.find({status:"delivered"})

  *) Retrieve the orderId and total of orders with a total greater than 1000.
      db.orders.find({total:{$gt:1000}},{orderId:1,total:1})

  *) Find orders that contain the product "Laptop".
       db.orders.find({"items.product":"Laptop"})

  *) Update the status of the order with orderId "ORD1002" to "delivered".
      db.orders.updateOne({orderId:"ORD1003"},{$set:{status:"delivered"}})

  *) Find all orders placed by the customer "Tom Hardy".
      db.orders.find({customerName:"Tom Hardy"},{items:1})

  *) Delete the order with orderId "ORD1003".
      db.orders.deleteOne({orderId:"ORD1003"});

  *) Add a new item to the order "ORD1001" with product "Tablet", quantity 1, and price 500.
       db.orders.updateOne({orderId:"ORD1001"},{$push:{items:{product:"Tablet",quantity:1,price:500}}})

  *) Find orders where the total is between 600 and 2000.
      db.orders.find({total:{$gt:600,$lt:2000}})

  *) Retrieve the total value of all orders combined.
      db.orders.aggregate([{$group:{_id:null,totalValue:{$sum:"$total"}}}])

  *) Sort orders by their orderDate in ascending order.
      db.orders.find().sort({orderedDate:1})


====================================================================================================

//courses

db.courses.insertMany([
  {
    "_id": 401,
    "title": "Introduction to Node.js",
    "instructor": "John Doe",
    "duration": 40,
    "studentsEnrolled": 150
  },
  {
    "_id": 402,
    "title": "Advanced MongoDB",
    "instructor": "Jane Smith",
    "duration": 60,
    "studentsEnrolled": 100
  },
  {
    "_id": 403,
    "title": "React.js for Beginners",
    "instructor": "Mike Brown",
    "duration": 30,
    "studentsEnrolled": 200
  }
]);


  *) Find all courses taught by "John Doe".
      db.courses.find({instructor:"John Doe"})

  *) Retrieve the titles and durations of courses that have more than 100 students enrolled.
      db.courses.find({studentsEnrolled:{$gt:100}},{title:1,duration:1})

  *) Find courses where the duration is greater than 40.
      db.courses.find({duration:{$gt:40}})

  *) Update the instructor of the course "React.js for Beginners" to "Sarah Lee".
      db.courses.updateOne({title:"React.js for Beginners"},{$set:{"instructor":"Sarah Lee"}})

  *) Find all courses where the number of students enrolled is less than 150.
      db.courses.find({"studentsEnrolled":{$lt:150}})

  *) Delete the course with the title "Advanced MongoDB".
      db.courses.deleteOne({title:"Advanced MongoDB"});

  *) Add 50 students to the "Introduction to Node.js" course.
      db.courses.updateOne({title: "Introduction to Node.js"},{$inc:{studentsEnrolled: 50}});

  *) Find all courses where the duration is between 30 and 60.
      db.courses.find({duration:{$gt:30,$lt:60}})

  *) Retrieve the total number of students enrolled across all courses.
      db.courses.aggregate([
        {$group:{_id:null,totalNoOfStudents:{$sum:"$studentsEnrolled"}}}
      ])

  *) Sort courses by the number of students enrolled in descending order
      db.courses.find().sort({studentsEnrolled:-1})






















































