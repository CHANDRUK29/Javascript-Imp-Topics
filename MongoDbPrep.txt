1) what is MongoDb?
    MongoDb is a open source document oriented NOSQL databases used for high 
    volume data storage. Instead of using tables and rows as in traditional relational
    databases mongodb uses collections and documents. 

    Collection - A group of mongodb documents.
    document - A way to organize and store data as a set of field-value pairs.


2) What are the advantages of mongodb?
    *)MongoDB supports field, range-based, string pattern matching type queries
    for searching the data in the database 
    *)MongoDB support primary and secondary index on any fields.
    *)MongoDB has inbuilt support for data partitioning (Sharding).
    *)MongoDB uses a dynamic database schema.


3) What are some features of MongoDB?
    *) Indexing: It supports generic secondary indexes and provides unique, compound, 
        geospatial, and full-text indexing capabilities as well.
    *) Aggregation: It provides an aggregation framework based on the concept of data processing pipelines.
    *) Special collection and index types: It supports time-to-live (TTL) collections for data 
        that should expire at a certain time
    *) File storage: It supports an easy-to-use protocol for storing large files and file metadata.
    *) Sharding: Sharding is the process of splitting data up across machines.


4) What is MongoShell?
    It is  Javascript shell that allows interaction with mongoDb instance from command line.


5) What is Indexing ?
    Indexing is basically a technique that helps in reducing the search time of database query or it helps in faster
    accessing the database.
    It supports efficient execution of queries in mongodb.

6) Explain Sharding ?
    Sharding is a type of database partioning in which large database is divided or partitioned into 
    smaller data and different nodes. These shards are not only smaller but also faster.

    Sharding is the process of splitting data up across machines. We also use the term "partioning".
    we can store more data and handle more load without requiring large or more powerful machines.


7) How does MongoDB store data?
    MongoDB stores data in BSON (Binary JSON) format, a binary-encoded serialization of JSON-like documents.
    These documents are stored in collections within databases.


8) What is a primary key in MongoDB?
    In MongoDB, the `_id` field serves as the primary key for a document. 
    It must be unique within a collection and is automatically generated if not provided during document insertion.


9) What is a replica set in MongoDB?
    It is a group of servers that maintain the same data. To keep identical copies of your data on multiple servers.
    It provides data redundancy and high availability. One server acts as the primary, 
    while others are secondary servers that replicate data from the primary.


10) What are the data types supported by MongoDB?
    MongoDB supports various data types, including string, number, boolean, date, array, object, null, 
    regex, and more. It also helps geospatial and binary data types.


11) What is a cursor in MongoDB, and when is it used?
    A cursor in MongoDB is an iterator to retrieve and process documents from query results. 
    Cursors are used when fetching large result sets, allowing you to retrieve documents in batches.


12) Can you explain the concept of data modeling in MongoDB?
    Data modeling in MongoDB involves designing the structure of your documents and collections 
    to represent your data best and meet your application's requirements. It includes defining document 
    schemas, relationships, and indexing strategies.


13) Aggregation in MongoDb?
    MongoDB's aggregation framework is a powerful tool designed for processing and transforming 
    documents within a collection. It is based on concept of a pipeline.
    We pass the documents from that collection through one or more stages each of which performs
    different operation on its inputs. Each stage takes input from the previous stage output.


14) What are the main features of MongoDB? 
    *) flexibility in data modeling, 
    *) horizontal scalability, 
    *) support for unstructured data, 
    *) powerful query language, 
    *) automatic sharding, 
    *) high availability with replica sets.


15)  What is the purpose of using MongoDB over other databases?
    MongoDB is chosen over other databases for its ability to handle flexible, unstructured, and rapidly changing data. 
    It excels in scenarios where scalability, speed, and agility are essential, such as web and mobile applications, 
    real-time analytics, and content management systems. Its horizontal scaling capabilities also make it suitable 
    for large-scale data storage and processing.


16) What are the different types of indexes in MongoDB?
    MongoDB supports various indexes, including 
        *) single-field indexes, 
        *) compound indexes, 
        *) geospatial indexes, 
        *) text indexes, 
        *) hashed indexes, and 
        *) wildcard indexes.


17) How do you scale a MongoDB database?
    You can scale MongoDB horizontally by adding more servers to a cluster, vertically by upgrading server hardware,
    or by using sharding to distribute data across multiple servers in a sharded cluster.


18) How do you implement security in MongoDB?
    MongoDB provides a range of security capabilities, including authentication, role-based access control (RBAC), 
    SSL/TLS encryption, auditing, and network security, ensuring data safeguarding and preventing unauthorized access.



19) How do you optimize query performance in MongoDB?
    You can optimize query performance by creating appropriate indexes, using the Aggregation Pipeline, 
    minimizing the number of queries, and optimizing query patterns to leverage the query planner.


20) Why NoSQL is Used Over SQL ?
    NoSQL is preferred over SQL in many cases because it offers more flexibility and scalability. 
    The primary benefit of using a NoSQL system is that it provides developers with the ability to 
    store and access data quickly and easily, without the overhead of a traditional relational database.


21) Which is better SQL or NoSQL?
    The decision of which type of database to use - SQL or NoSQL - will depend on the particular needs and 
    requirements of the project. For example, if you need a fast, scalable, and reliable database for web 
    applications then a NoSQL system may be preferable. On the other hand, if your application requires 
    complex data queries and transactional support then an SQL system may be the better choice. 


22) Explain the structure of ObjectID in MongoDB.
        ObjectID is a 12-byte BSON type. These are:
            *) 4 bytes value representing seconds
            *) 3 byte machine identifier
            *) 2 byte process id
            *) 3 byte counter


23)  What is primary and secondary replica set in MongoDB?
    In MongoDB, primary nodes are the node that can accept write. These are also known as master nodes. 
    The replication in MongoDB is single master so, only one node can accept write operations at a time.
    Secondary nodes are known as slave nodes. These are read only nodes that replicate from the primary.


24) MongoDb Query Operators?
    There are many query operators that can be used to compare and reference document fields.
        Comparison :
            *) $eq: Values are equal
            *) $ne: Values are not equal
            *) $gt: Value is greater than another value
            *) $gte: Value is greater than or equal to another value
            *) $lt: Value is less than another value
            *) $lte: Value is less than or equal to another value
            *) $in: Value is matched within an array
        
        Logical :
            *) $and: Returns documents where both queries match
            *) $or: Returns documents where either query matches
            *) $nor: Returns documents where both queries fail to match
            *) $not: Returns documents where the query does not match

        Evaluation :
            *) $regex: Allows the use of regular expressions when evaluating field values
            *) $text: Performs a text search
            *) $where: Uses a JavaScript expression to match documents


25) MongoDB Update Operators ?
        There are many update operators that can be used during document updates.
            Fields:
                *) $currentDate: Sets the field value to the current date
                *) $inc: Increments the field value
                *) $rename: Renames the field
                *) $set: Sets the value of a field
                *) $unset: Removes the field from the document

            Array:
                *) $addToSet: Adds distinct elements to an array
                *) $pop: Removes the first or last element of an array
                *) $pull: Removes all elements from an array that match the query
                *) $push: Adds an element to an array

            






====================================================================================================================

// Query Practices

db.employees.insertMany([
  {
    "_id": 4,
    "name": "Sam Wilson",
    "age": 25,
    "department": "Marketing",
    "salary": 40000,
    "projects": [
      { "name": "Project E", "status": "completed" },
      { "name": "Project F", "status": "in-progress" }
    ]
  },
  {
    "_id": 5,
    "name": "Sarah Connor",
    "age": 37,
    "department": "Operations",
    "salary": 65000,
    "projects": [
      { "name": "Project G", "status": "completed" }
    ]
  },
  {
    "_id": 6,
    "name": "Bruce Wayne",
    "age": 45,
    "department": "Finance",
    "salary": 90000,
    "projects": []
  }
]);


*) Find all employees working in the "Finance" department.
        db.employees.find({department:"Finance"}); 

*) Retrieve the names of employees whose salary is greater than 50,000.
        db.employees.find({salary:{$gt:50000}});

*) Find employees who have worked on a project with the status of "in-progress".
        db.employees.find({"projects.status":"in-progress"}) 

*) Update the salary of the employee with the name "Sam Wilson" to 45,000.
        db.employees.updateOne({name:"Sam Wilson"},{$set:{salary:45000}});

*) Find all employees whose age is between 30 and 40.
        db.employees.find({age:{$gt:30,$lt:40}}) 

*) Delete the employee document with the name "Bruce Wayne".
        db.employees.deleteOne({name:"Bruce Wayne"})

*) Add a new project "Project G" with the status of "not-started" to the employee "Sam Wilson".
        db.employees.updateOne( { name: "Sam Wilson" }, { $push: { projects: { name: "Project G", status: "not-started" } } } );

*) Find employees who have no projects assigned.
        db.employees.find({projects:{$size:0}}) 

*) Retrieve the total number of employees in each department.
        db.employees.aggregate([{$group:{_id:"$department",totalEmployees:{$sum:1}}}])

*) Sort employees by their salary in descending order.
        db.employees.find().sort({salary:-1})


































































